{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class MyAuthGuard {\n  // canActivate(\n  //   route: ActivatedRouteSnapshot,\n  //   state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n  //   return true;\n  // }\n  // canActivateChild(\n  //   childRoute: ActivatedRouteSnapshot,\n  //   state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n  //   return true;\n  // }\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Check if a token exists in local storage\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Token exists, allow access to the route\n      return true;\n    } else {\n      // No token, redirect to the login page and deny access\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  canActivateChild(childRoute, state) {\n    // Apply the same logic as canActivate for child routes\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Token exists, allow access to the route\n      return this.canActivate(childRoute, state);\n    } else {\n      // No token, redirect to the login page and deny access\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function MyAuthGuard_Factory(t) {\n    return new (t || MyAuthGuard)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyAuthGuard,\n    factory: MyAuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,sBAAsB,EAAiCC,MAAM,EAAEC,mBAAmB,EAAEC,OAAO,QAAQ,iBAAiB;;;AAM7H,OAAM,MAAOC,WAAW;EAEtB;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEAC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAEAC,gBAAgB,CAACC,UAAkC,EAAEN,KAA0B;IAC7E;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT;MACA,OAAO,IAAI,CAACH,WAAW,CAACQ,UAAU,EAAEN,KAAK,CAAC;KAC3C,MAAM;MACL;MACA,IAAI,CAACH,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAAC;qBA1CUT,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAY,SAAXZ,WAAW;IAAAa,YAFV;EAAM","names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","UrlTree","MyAuthGuard","constructor","router","canActivate","route","state","token","localStorage","getItem","navigate","canActivateChild","childRoute","factory","providedIn"],"sourceRoot":"","sources":["F:\\Projects\\Project Square\\Template\\project_square\\src\\app\\guards\\my-auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyAuthGuard implements CanActivate, CanActivateChild {\n\n  // canActivate(\n  //   route: ActivatedRouteSnapshot,\n  //   state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n  //   return true;\n  // }\n\n  // canActivateChild(\n  //   childRoute: ActivatedRouteSnapshot,\n  //   state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n  //   return true;\n  // }\n\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    // Check if a token exists in local storage\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      // Token exists, allow access to the route\n      return true;\n    } else {\n      // No token, redirect to the login page and deny access\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    // Apply the same logic as canActivate for child routes\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      // Token exists, allow access to the route\n      return this.canActivate(childRoute, state);\n    } else {\n      // No token, redirect to the login page and deny access\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}