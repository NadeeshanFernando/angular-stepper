{"ast":null,"code":"export class GenericValidator {\n  static common(control) {\n    const value = control.value;\n    return null; // Field is valid\n  }\n\n  static epf_no(control) {\n    const value = control.value;\n    // Check if the field is empty\n    if (!value) {\n      return {\n        requireEpfNo: true\n      }; // Required validator will handle empty fields\n    }\n    // Check if the field contains only alphanumeric characters\n    const pattern = /^[A-Za-z0-9]*$/;\n    if (!pattern.test(value)) {\n      return {\n        invalidEpfNo: true\n      }; // Return custom error for invalid format\n    }\n\n    if (value.length !== 10) {\n      return {\n        wrongEpfNo: true\n      };\n    }\n    return null; // Field is valid\n  }\n\n  static company(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireCompany: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static branch(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireBranch: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static department(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireDepartment: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static designation(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireDesignation: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static grade(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireGrade: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static date_of_joining(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireDateOfJoining: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static hod_name(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireHodName: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static epf_no_of_hod(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireEpfNoOfHod: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static first_name(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireFirstName: true\n      }; // Required validator will handle empty fields\n    }\n\n    if (value.length < 3) {\n      return {\n        WrongFirstName: true\n      };\n    }\n    if (value.length > 15) {\n      return {\n        ErrorFirstName: true\n      };\n    }\n    return null; // Field is valid\n  }\n\n  static middle_name(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireMiddleName: true\n      }; // Required validator will handle empty fields\n    }\n\n    if (value.length < 3) {\n      return {\n        WrongFirstName: true\n      };\n    }\n    if (value.length > 15) {\n      return {\n        ErrorFirstName: true\n      };\n    }\n    return null; // Field is valid\n  }\n\n  static last_name(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireLastName: true\n      }; // Required validator will handle empty fields\n    }\n\n    if (value.length < 3) {\n      return {\n        WrongFirstName: true\n      };\n    }\n    if (value.length > 15) {\n      return {\n        ErrorFirstName: true\n      };\n    }\n    return null; // Field is valid\n  }\n\n  static mobile_no(control) {\n    const value = control.value;\n    if (!value) {\n      return {\n        requireMobileNumber: true\n      }; // Required validator will handle empty fields\n    }\n\n    const pattern = /^[0-9]*$/;\n    if (!pattern.test(value)) {\n      return {\n        invalidMobileNumber: true\n      }; // Return custom error for invalid format\n    }\n\n    if (value.length !== 10) {\n      return {\n        wrongMobileNumber: true\n      };\n    }\n    return null; // Field is valid\n  }\n\n  static exampleInputFile(control) {\n    const file = control.value;\n    if (!file) {\n      return null; // No file is selected\n    }\n\n    const allowedExtensions = ['jpg', 'jpeg', 'png'];\n    const maxFileSize = 2 * 1024 * 1024;\n    const fileName = file.name.toLowerCase();\n    const fileExtension = fileName.split('.').pop();\n    if (!allowedExtensions.includes(fileExtension)) {\n      return {\n        invalidExtension: true\n      }; //Invalid file extension\n    }\n  }\n\n  static any_other(control) {\n    const text = control.value;\n    if (text && text.length < 10) {\n      return {\n        invalidTextArea: true\n      }; // Required validator will handle empty fields\n    }\n\n    return null; // Field is valid\n  }\n\n  static checkbox(control) {\n    const checkbox = control.value;\n    if (!checkbox || checkbox.length === 0) {\n      return {\n        noCheckboxSelected: true\n      }; // Required validator will handle empty fields\n    }\n\n    if (checkbox.length > 1) {\n      return {\n        multipleCheckboxesSelected: true\n      };\n    }\n    return null; // Field is valid\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,gBAAgB;EAEzB,OAAOC,MAAM,CAACC,OAAwB;IAClC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,MAAM,CAACF,OAAwB;IAClC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B;IACA,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEE,YAAY,EAAE;MAAI,CAAE,CAAC,CAAC;;IAEnC;IACA,MAAMC,OAAO,GAAG,gBAAgB;IAChC,IAAI,CAACA,OAAO,CAACC,IAAI,CAACJ,KAAK,CAAC,EAAE;MACtB,OAAO;QAAEK,YAAY,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAGnC,IAAIL,KAAK,CAACM,MAAM,KAAI,EAAE,EAAC;MACnB,OAAO;QAAEC,UAAU,EAAE;MAAI,CAAE;;IAE/B,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,OAAO,CAACT,OAAwB;IACnC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAE3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAES,cAAc,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAErC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,MAAM,CAACX,OAAwB;IAClC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEW,aAAa,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEpC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,UAAU,CAACb,OAAwB;IACtC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEa,iBAAiB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAExC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,WAAW,CAACf,OAAwB;IACvC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEe,kBAAkB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEzC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,KAAK,CAACjB,OAAwB;IACjC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEiB,YAAY,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEnC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,eAAe,CAACnB,OAAwB;IAC3C,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEmB,oBAAoB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAE3C,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,QAAQ,CAACrB,OAAwB;IACpC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEqB,cAAc,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAErC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,aAAa,CAACvB,OAAwB;IACzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEuB,iBAAiB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAExC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,UAAU,CAACzB,OAAwB;IACtC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEyB,gBAAgB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAGvC,IAAGzB,KAAK,CAACM,MAAM,GAAE,CAAC,EAAC;MACf,OAAO;QAAEoB,cAAc,EAAE;MAAI,CAAE;;IAGnC,IAAG1B,KAAK,CAACM,MAAM,GAAG,EAAE,EAAC;MACjB,OAAO;QAAEqB,cAAc,EAAE;MAAI,CAAE;;IAGnC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,WAAW,CAAC7B,OAAwB;IACvC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAE6B,iBAAiB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAExC,IAAG7B,KAAK,CAACM,MAAM,GAAE,CAAC,EAAC;MACf,OAAO;QAAEoB,cAAc,EAAE;MAAI,CAAE;;IAGnC,IAAG1B,KAAK,CAACM,MAAM,GAAG,EAAE,EAAC;MACjB,OAAO;QAAEqB,cAAc,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOG,SAAS,CAAC/B,OAAwB;IACrC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAE+B,eAAe,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEtC,IAAG/B,KAAK,CAACM,MAAM,GAAE,CAAC,EAAC;MACf,OAAO;QAAEoB,cAAc,EAAE;MAAI,CAAE;;IAGnC,IAAG1B,KAAK,CAACM,MAAM,GAAG,EAAE,EAAC;MACjB,OAAO;QAAEqB,cAAc,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOK,SAAS,CAACjC,OAAwB;IACrC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACA,KAAK,EAAE;MACR,OAAO;QAAEiC,mBAAmB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAG1C,MAAM9B,OAAO,GAAG,UAAU;IAC1B,IAAI,CAACA,OAAO,CAACC,IAAI,CAACJ,KAAK,CAAC,EAAE;MACtB,OAAO;QAAEkC,mBAAmB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAG1C,IAAIlC,KAAK,CAACM,MAAM,KAAI,EAAE,EAAC;MACnB,OAAO;QAAE6B,iBAAiB,EAAE;MAAI,CAAE;;IAGtC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,gBAAgB,CAACrC,OAAwB;IAC5C,MAAMsC,IAAI,GAAGtC,OAAO,CAACC,KAAK;IAC1B,IAAI,CAACqC,IAAI,EAAE;MACP,OAAO,IAAI,CAAC,CAAC;;;IAEjB,MAAMC,iBAAiB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;IAChD,MAAMC,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;IAEnC,MAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI,CAACC,WAAW,EAAE;IACxC,MAAMC,aAAa,GAAGH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;IAE/C,IAAG,CAACP,iBAAiB,CAACQ,QAAQ,CAACH,aAAa,CAAC,EAAC;MAC1C,OAAM;QAACI,gBAAgB,EAAE;MAAI,CAAC,CAAC,CAAC;;EAExC;;EAEA,OAAOC,SAAS,CAACjD,OAAwB;IACrC,MAAMkD,IAAI,GAAGlD,OAAO,CAACC,KAAK;IAC1B,IAAIiD,IAAI,IAAIA,IAAI,CAAC3C,MAAM,GAAG,EAAE,EAAE;MAC1B,OAAO;QAAE4C,eAAe,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEtC,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA,OAAOC,QAAQ,CAACpD,OAAwB;IACpC,MAAMoD,QAAQ,GAAGpD,OAAO,CAACC,KAAK;IAE9B,IAAI,CAACmD,QAAQ,IAAIA,QAAQ,CAAC7C,MAAM,KAAI,CAAC,EAAE;MACnC,OAAO;QAAE8C,kBAAkB,EAAE;MAAI,CAAE,CAAC,CAAC;;;IAEzC,IAAID,QAAQ,CAAC7C,MAAM,GAAG,CAAC,EAAC;MACpB,OAAO;QAAE+C,0BAA0B,EAAE;MAAI,CAAC;;IAE9C,OAAO,IAAI,CAAC,CAAC;EACjB","names":["GenericValidator","common","control","value","epf_no","requireEpfNo","pattern","test","invalidEpfNo","length","wrongEpfNo","company","requireCompany","branch","requireBranch","department","requireDepartment","designation","requireDesignation","grade","requireGrade","date_of_joining","requireDateOfJoining","hod_name","requireHodName","epf_no_of_hod","requireEpfNoOfHod","first_name","requireFirstName","WrongFirstName","ErrorFirstName","middle_name","requireMiddleName","last_name","requireLastName","mobile_no","requireMobileNumber","invalidMobileNumber","wrongMobileNumber","exampleInputFile","file","allowedExtensions","maxFileSize","fileName","name","toLowerCase","fileExtension","split","pop","includes","invalidExtension","any_other","text","invalidTextArea","checkbox","noCheckboxSelected","multipleCheckboxesSelected"],"sourceRoot":"","sources":["F:\\Projects\\Project Square\\Template\\project_square\\src\\app\\validation\\generic-validator.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\n\nexport class GenericValidator {\n\n    static common(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        return null; // Field is valid\n    }\n\n    static epf_no(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        // Check if the field is empty\n        if (!value) {\n            return { requireEpfNo: true }; // Required validator will handle empty fields\n        }\n        // Check if the field contains only alphanumeric characters\n        const pattern = /^[A-Za-z0-9]*$/;\n        if (!pattern.test(value)) {\n            return { invalidEpfNo: true }; // Return custom error for invalid format\n        }\n\n        if (value.length !==10){\n            return { wrongEpfNo: true };\n        }\n        return null; // Field is valid\n    }\n\n    static company(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        \n        if (!value) {\n            return { requireCompany: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static branch(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireBranch: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static department(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireDepartment: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static designation(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireDesignation: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static grade(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireGrade: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static date_of_joining(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireDateOfJoining: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static hod_name(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireHodName: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static epf_no_of_hod(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireEpfNoOfHod: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static first_name(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireFirstName: true }; // Required validator will handle empty fields\n        }\n\n        if(value.length <3){\n            return { WrongFirstName: true };\n        }\n\n        if(value.length > 15){\n            return { ErrorFirstName: true };\n        }\n\n        return null; // Field is valid\n    }\n\n    static middle_name(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireMiddleName: true }; // Required validator will handle empty fields\n        }\n        if(value.length <3){\n            return { WrongFirstName: true };\n        }\n\n        if(value.length > 15){\n            return { ErrorFirstName: true };\n        }\n        return null; // Field is valid\n    }\n\n    static last_name(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireLastName: true }; // Required validator will handle empty fields\n        }\n        if(value.length <3){\n            return { WrongFirstName: true };\n        }\n\n        if(value.length > 15){\n            return { ErrorFirstName: true };\n        }\n        return null; // Field is valid\n    }\n\n    static mobile_no(control: AbstractControl): ValidationErrors | null {\n        const value = control.value;\n        if (!value) {\n            return { requireMobileNumber: true }; // Required validator will handle empty fields\n        }\n\n        const pattern = /^[0-9]*$/;\n        if (!pattern.test(value)) {\n            return { invalidMobileNumber: true }; // Return custom error for invalid format\n        }\n\n        if (value.length !==10){\n            return { wrongMobileNumber: true };\n        }\n\n        return null; // Field is valid\n    }\n\n    static exampleInputFile(control: AbstractControl): ValidationErrors | null {\n        const file = control.value;\n        if (!file) {\n            return null; // No file is selected\n        }\n        const allowedExtensions = ['jpg', 'jpeg', 'png'];\n        const maxFileSize = 2 * 1024 * 1024; \n\n        const fileName = file.name.toLowerCase();\n        const fileExtension = fileName.split('.').pop();\n\n        if(!allowedExtensions.includes(fileExtension)){\n            return{invalidExtension: true}; //Invalid file extension\n        }\n    }\n\n    static any_other(control: AbstractControl): ValidationErrors | null {\n        const text = control.value;\n        if (text && text.length < 10) {\n            return { invalidTextArea: true }; // Required validator will handle empty fields\n        }\n        return null; // Field is valid\n    }\n\n    static checkbox(control: AbstractControl): ValidationErrors | null {\n        const checkbox = control.value;\n\n        if (!checkbox || checkbox.length ===0) {\n            return { noCheckboxSelected: true }; // Required validator will handle empty fields\n        }\n        if (checkbox.length > 1){\n            return { multipleCheckboxesSelected: true}\n        }\n        return null; // Field is valid\n    }\n\n    \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}