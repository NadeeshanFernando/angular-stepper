{"ast":null,"code":"import { NAVBAR_LIGHT_VARIANTS, NAVBAR_DARK_VARIANTS, SIDEBAR_DARK_SKINS, SIDEBAR_LIGHT_SKINS } from '@/utils/themes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@profabric/angular-components\";\nconst _c0 = function () {\n  return [];\n};\nexport class ControlSidebarComponent {\n  constructor(store) {\n    this.store = store;\n    this.classes = 'control-sidebar control-sidebar-dark';\n    this.navbarLightVariants = NAVBAR_LIGHT_VARIANTS;\n    this.navbarDarkVariants = NAVBAR_DARK_VARIANTS;\n    this.darkSidebarSkins = SIDEBAR_DARK_SKINS;\n    this.lightSidebarSkins = SIDEBAR_LIGHT_SKINS;\n  }\n  ngOnInit() {\n    this.ui = this.store.select('ui');\n    this.ui.subscribe(state => {\n      this.navbarVariant = state.navbarVariant;\n      this.darkMode = state.darkMode;\n      this.sidebarSkin = state.sidebarSkin;\n    });\n  }\n  handleDarkModeChange(event) {\n    console.log('value', event.target.checked);\n    this.store.dispatch(new ToggleDarkMode());\n  }\n  onNavbarVariantChange(event) {\n    console.log('value', event.target.value);\n    this.store.dispatch(new SetNavbarVariant(event.target.value));\n  }\n  onSidebarSkinChange(event) {\n    console.log('value', event.target.value);\n    this.store.dispatch(new SetSidebarSkin(event.target.value));\n  }\n  static #_ = this.ɵfac = function ControlSidebarComponent_Factory(t) {\n    return new (t || ControlSidebarComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ControlSidebarComponent,\n    selectors: [[\"app-control-sidebar\"]],\n    hostVars: 2,\n    hostBindings: function ControlSidebarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.classes);\n      }\n    },\n    decls: 12,\n    vars: 12,\n    consts: [[1, \"mb-2\"], [2, \"padding\", \"8px 0\"], [3, \"change\"], [\"type\", \"custom\", \"label\", \"Light Navbar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"label\", \" Dark Navbar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"disabled\", \"true\", \"label\", \"Accent Color Variants\", 1, \"mt-3\", 3, \"options\"], [\"type\", \"custom\", \"label\", \"Light Sidebar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"label\", \"Dark Sidebar Variants\", 1, \"mt-3\", 3, \"value\", \"options\", \"change\"], [\"type\", \"custom\", \"disabled\", \"true\", \"label\", \"Brand Logo Variants\", 1, \"mt-3\", 3, \"options\"]],\n    template: function ControlSidebarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h5\");\n        i0.ɵɵtext(1, \"Customize AdminLTE\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"hr\", 0);\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"pf-checkbox\", 2);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_checkbox_change_4_listener($event) {\n          return ctx.handleDarkModeChange($event);\n        });\n        i0.ɵɵtext(5, \" Dark mode \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"pf-select\", 3);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_6_listener($event) {\n          return ctx.onNavbarVariantChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"pf-select\", 4);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_7_listener($event) {\n          return ctx.onNavbarVariantChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"pf-select\", 5);\n        i0.ɵɵelementStart(9, \"pf-select\", 6);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_9_listener($event) {\n          return ctx.onSidebarSkinChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"pf-select\", 7);\n        i0.ɵɵlistener(\"change\", function ControlSidebarComponent_Template_pf_select_change_10_listener($event) {\n          return ctx.onSidebarSkinChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"pf-select\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"value\", ctx.navbarVariant)(\"options\", ctx.navbarLightVariants);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.navbarVariant)(\"options\", ctx.navbarDarkVariants);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction0(10, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.sidebarSkin)(\"options\", ctx.lightSidebarSkins);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.sidebarSkin)(\"options\", ctx.darkSidebarSkins);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction0(11, _c0));\n      }\n    },\n    dependencies: [i2.PfCheckbox, i2.PfSelect],\n    styles: [\"[_nghost-%COMP%] {\\n  padding: 16px;\\n  padding-top: 73px;\\n}\\n/*# sourceURL=webpack://./src/app/modules/main/control-sidebar/control-sidebar.component.scss */\\n/*# sourceURL=webpack://./../../../Project%20Square/Template/adminlte-3-angular-main/src/app/modules/main/control-sidebar/control-sidebar.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9tYWluL2NvbnRyb2wtc2lkZWJhci9jb250cm9sLXNpZGViYXIuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi9Qcm9qZWN0JTIwU3F1YXJlL1RlbXBsYXRlL2FkbWlubHRlLTMtYW5ndWxhci1tYWluL3NyYy9hcHAvbW9kdWxlcy9tYWluL2NvbnRyb2wtc2lkZWJhci9jb250cm9sLXNpZGViYXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFSSxhQUFBO0VBQ0EsaUJBQUE7QUNBSiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgcGFkZGluZzogMTZweDtcbiAgcGFkZGluZy10b3A6IDczcHg7XG59IiwiOmhvc3Qge1xuICBwYWRkaW5nOiAxNnB4O1xuICBwYWRkaW5nLXRvcDogNzNweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAEIA,qBAAqB,EACrBC,oBAAoB,EACpBC,kBAAkB,EAClBC,mBAAmB,QAChB,gBAAgB;;;;;;;AAUvB,OAAM,MAAOC,uBAAuB;EAYhCC,YAAoBC,KAAsB;IAAtB,UAAK,GAALA,KAAK;IAXH,YAAO,GACzB,sCAAsC;IACnC,wBAAmB,GAAkBN,qBAAqB;IAC1D,uBAAkB,GAAkBC,oBAAoB;IACxD,qBAAgB,GAAkBC,kBAAkB;IACpD,sBAAiB,GAAkBC,mBAAmB;EAMhB;EAE7CI,QAAQ;IACJ,IAAI,CAACC,EAAE,GAAG,IAAI,CAACF,KAAK,CAACG,MAAM,CAAC,IAAI,CAAC;IACjC,IAAI,CAACD,EAAE,CAACE,SAAS,CAAEC,KAAc,IAAI;MACjC,IAAI,CAACC,aAAa,GAAGD,KAAK,CAACC,aAAa;MACxC,IAAI,CAACC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;MAC9B,IAAI,CAACC,WAAW,GAAGH,KAAK,CAACG,WAAW;IACxC,CAAC,CAAC;EACN;EAEOC,oBAAoB,CAACC,KAAU;IAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACC,OAAO,CAAC;IAC1C,IAAI,CAACd,KAAK,CAACe,QAAQ,CAAC,IAAIC,cAAc,EAAE,CAAC;EAC7C;EAEOC,qBAAqB,CAACP,KAAU;IACnCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACK,KAAK,CAAC;IACxC,IAAI,CAAClB,KAAK,CAACe,QAAQ,CAAC,IAAII,gBAAgB,CAACT,KAAK,CAACG,MAAM,CAACK,KAAK,CAAC,CAAC;EACjE;EAEOE,mBAAmB,CAACV,KAAU;IACjCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACG,MAAM,CAACK,KAAK,CAAC;IACxC,IAAI,CAAClB,KAAK,CAACe,QAAQ,CAAC,IAAIM,cAAc,CAACX,KAAK,CAACG,MAAM,CAACK,KAAK,CAAC,CAAC;EAC/D;EAAC;qBApCQpB,uBAAuB;EAAA;EAAA;UAAvBA,uBAAuB;IAAAwB;IAAAC;IAAAC;MAAA;;;;;;;;;QCjBpCC,0BAAI;QAAAA,kCAAkB;QAAAA,iBAAK;QAC3BA,wBAAmB;QACnBA,8BAA4B;QACXA;UAAA,OAAUC,gCAA4B;QAAA,EAAC;QAChDD,2BACJ;QAAAA,iBAAc;QACdA,oCAOC;QADGA;UAAA,OAAUC,iCAA6B;QAAA,EAAC;QAE5CD,iBAAY;QACZA,oCAOC;QADGA;UAAA,OAAUC,iCAA6B;QAAA,EAAC;QAE5CD,iBAAY;QACZA,+BAOY;QACZA,oCAOC;QADGA;UAAA,OAAUC,+BAA2B;QAAA,EAAC;QAE1CD,iBAAY;QACZA,qCAOC;QADGA;UAAA,OAAUC,+BAA2B;QAAA,EAAC;QAE1CD,iBAAY;QAEZA,gCAOY;QAChBA,iBAAM;;;QAnDEA,eAAuB;QAAvBA,yCAAuB;QASvBA,eAAuB;QAAvBA,yCAAuB;QASvBA,eAAc;QAAdA,qDAAc;QAQdA,eAAqB;QAArBA,uCAAqB;QASrBA,eAAqB;QAArBA,uCAAqB;QAUrBA,eAAc;QAAdA,qDAAc","names":["NAVBAR_LIGHT_VARIANTS","NAVBAR_DARK_VARIANTS","SIDEBAR_DARK_SKINS","SIDEBAR_LIGHT_SKINS","ControlSidebarComponent","constructor","store","ngOnInit","ui","select","subscribe","state","navbarVariant","darkMode","sidebarSkin","handleDarkModeChange","event","console","log","target","checked","dispatch","ToggleDarkMode","onNavbarVariantChange","value","SetNavbarVariant","onSidebarSkinChange","SetSidebarSkin","selectors","hostVars","hostBindings","i0","ctx"],"sourceRoot":"","sources":["F:\\Projects\\Project Square\\Template\\adminlte-3-angular-main\\src\\app\\modules\\main\\control-sidebar\\control-sidebar.component.ts","F:\\Projects\\Project Square\\Template\\adminlte-3-angular-main\\src\\app\\modules\\main\\control-sidebar\\control-sidebar.component.html"],"sourcesContent":["\nimport {\n    Option,\n    NAVBAR_LIGHT_VARIANTS,\n    NAVBAR_DARK_VARIANTS,\n    SIDEBAR_DARK_SKINS,\n    SIDEBAR_LIGHT_SKINS\n} from '@/utils/themes';\nimport {Component, HostBinding, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {Observable} from 'rxjs';\n\n@Component({\n    selector: 'app-control-sidebar',\n    templateUrl: './control-sidebar.component.html',\n    styleUrls: ['./control-sidebar.component.scss']\n})\nexport class ControlSidebarComponent implements OnInit {\n    @HostBinding('class') classes: string =\n        'control-sidebar control-sidebar-dark';\n    public navbarLightVariants: Array<Option> = NAVBAR_LIGHT_VARIANTS;\n    public navbarDarkVariants: Array<Option> = NAVBAR_DARK_VARIANTS;\n    public darkSidebarSkins: Array<Option> = SIDEBAR_DARK_SKINS;\n    public lightSidebarSkins: Array<Option> = SIDEBAR_LIGHT_SKINS;\n\n    public navbarVariant: string;\n    public darkMode: boolean;\n    public sidebarSkin: string;\n\n    constructor(private store: Store<AppState>) {}\n\n    ngOnInit(): void {\n        this.ui = this.store.select('ui');\n        this.ui.subscribe((state: UiState) => {\n            this.navbarVariant = state.navbarVariant;\n            this.darkMode = state.darkMode;\n            this.sidebarSkin = state.sidebarSkin;\n        });\n    }\n\n    public handleDarkModeChange(event: any) {\n        console.log('value', event.target.checked);\n        this.store.dispatch(new ToggleDarkMode());\n    }\n\n    public onNavbarVariantChange(event: any) {\n        console.log('value', event.target.value);\n        this.store.dispatch(new SetNavbarVariant(event.target.value));\n    }\n\n    public onSidebarSkinChange(event: any) {\n        console.log('value', event.target.value);\n        this.store.dispatch(new SetSidebarSkin(event.target.value));\n    }\n}\n","<h5>Customize AdminLTE</h5>\n<hr class=\"mb-2\" />\n<div style=\"padding: 8px 0\">\n    <pf-checkbox (change)=\"handleDarkModeChange($event)\">\n        Dark mode\n    </pf-checkbox>\n    <pf-select\n        class=\"mt-3\"\n        [value]=\"navbarVariant\"\n        [options]=\"navbarLightVariants\"\n        type=\"custom\"\n        label=\"Light Navbar Variants\"\n        (change)=\"onNavbarVariantChange($event)\"\n    >\n    </pf-select>\n    <pf-select\n        class=\"mt-3\"\n        [value]=\"navbarVariant\"\n        [options]=\"navbarDarkVariants\"\n        type=\"custom\"\n        label=\" Dark Navbar Variants\"\n        (change)=\"onNavbarVariantChange($event)\"\n    >\n    </pf-select>\n    <pf-select\n        class=\"mt-3\"\n        [options]=\"[]\"\n        type=\"custom\"\n        disabled=\"true\"\n        label=\"Accent Color Variants\"\n    >\n    </pf-select>\n    <pf-select\n        class=\"mt-3\"\n        [value]=\"sidebarSkin\"\n        [options]=\"lightSidebarSkins\"\n        type=\"custom\"\n        label=\"Light Sidebar Variants\"\n        (change)=\"onSidebarSkinChange($event)\"\n    >\n    </pf-select>\n    <pf-select\n        class=\"mt-3\"\n        [value]=\"sidebarSkin\"\n        [options]=\"darkSidebarSkins\"\n        type=\"custom\"\n        label=\"Dark Sidebar Variants\"\n        (change)=\"onSidebarSkinChange($event)\"\n    >\n    </pf-select>\n\n    <pf-select\n        class=\"mt-3\"\n        [options]=\"[]\"\n        type=\"custom\"\n        disabled=\"true\"\n        label=\"Brand Logo Variants\"\n    >\n    </pf-select>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}