{"ast":null,"code":"import _asyncToGenerator from \"F:/Projects/Project Square/Template/adminlte-3-angular-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Gatekeeper } from 'gatekeeper-client-sdk';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport class AppService {\n  constructor(router, toastr) {\n    this.router = router;\n    this.toastr = toastr;\n    this.user = null;\n  }\n  loginByAuth({\n    email,\n    password\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const token = yield Gatekeeper.loginByAuth(email, password);\n        localStorage.setItem('token', token);\n        yield _this.getProfile();\n        _this.router.navigate(['/']);\n        _this.toastr.success('Login success');\n      } catch (error) {\n        _this.toastr.error(error.message);\n      }\n    })();\n  }\n  // async registerByAuth({email, password}) {\n  //     try {\n  //         const token = await Gatekeeper.registerByAuth(email, password);\n  //         localStorage.setItem('token', token);\n  //         await this.getProfile();\n  //         this.router.navigate(['/']);\n  //         this.toastr.success('Register success');\n  //     } catch (error) {\n  //         this.toastr.error(error.message);\n  //     }\n  // }\n  // async loginByGoogle() {\n  //     try {\n  //         const token = await Gatekeeper.loginByGoogle();\n  //         localStorage.setItem('token', token);\n  //         await this.getProfile();\n  //         this.router.navigate(['/']);\n  //         this.toastr.success('Login success');\n  //     } catch (error) {\n  //         this.toastr.error(error.message);\n  //     }\n  // }\n  // async registerByGoogle() {\n  //     try {\n  //         const token = await Gatekeeper.registerByGoogle();\n  //         localStorage.setItem('token', token);\n  //         await this.getProfile();\n  //         this.router.navigate(['/']);\n  //         this.toastr.success('Register success');\n  //     } catch (error) {\n  //         this.toastr.error(error.message);\n  //     }\n  // }\n  // async loginByFacebook() {\n  //     try {\n  //         const token = await Gatekeeper.loginByFacebook();\n  //         localStorage.setItem('token', token);\n  //         await this.getProfile();\n  //         this.router.navigate(['/']);\n  //         this.toastr.success('Login success');\n  //     } catch (error) {\n  //         this.toastr.error(error.message);\n  //     }\n  // }\n  registerByFacebook() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const token = yield Gatekeeper.registerByFacebook();\n        localStorage.setItem('token', token);\n        yield _this2.getProfile();\n        _this2.router.navigate(['/']);\n        _this2.toastr.success('Register success');\n      } catch (error) {\n        _this2.toastr.error(error.message);\n      }\n    })();\n  }\n  getProfile() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this3.user = yield Gatekeeper.getProfile();\n      } catch (error) {\n        _this3.logout();\n        throw error;\n      }\n    })();\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('gatekeeper_token');\n    this.user = null;\n    this.router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AppService_Factory(t) {\n    return new (t || AppService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppService,\n    factory: AppService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAGA,SAAQA,UAAU,QAAO,uBAAuB;;;;AAKhD,OAAM,MAAOC,UAAU;EAGnBC,YAAoBC,MAAc,EAAUC,MAAqB;IAA7C,WAAM,GAAND,MAAM;IAAkB,WAAM,GAANC,MAAM;IAF3C,SAAI,GAAQ,IAAI;EAE6C;EAE9DC,WAAW,CAAC;IAACC,KAAK;IAAEC;EAAQ,CAAC;IAAA;IAAA;MAC/B,IAAI;QACA,MAAMC,KAAK,SAASR,UAAU,CAACK,WAAW,CAACC,KAAK,EAAEC,QAAQ,CAAC;QAC3DE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;QACpC,MAAM,KAAI,CAACG,UAAU,EAAE;QACvB,KAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,KAAI,CAACR,MAAM,CAACS,OAAO,CAAC,eAAe,CAAC;OACvC,CAAC,OAAOC,KAAK,EAAE;QACZ,KAAI,CAACV,MAAM,CAACU,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;;IACnC;EACL;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEMC,kBAAkB;IAAA;IAAA;MACpB,IAAI;QACA,MAAMR,KAAK,SAASR,UAAU,CAACgB,kBAAkB,EAAE;QACnDP,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;QACpC,MAAM,MAAI,CAACG,UAAU,EAAE;QACvB,MAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,MAAI,CAACR,MAAM,CAACS,OAAO,CAAC,kBAAkB,CAAC;OAC1C,CAAC,OAAOC,KAAK,EAAE;QACZ,MAAI,CAACV,MAAM,CAACU,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;;IACnC;EACL;EAEMJ,UAAU;IAAA;IAAA;MACZ,IAAI;QACA,MAAI,CAACM,IAAI,SAASjB,UAAU,CAACW,UAAU,EAAE;OAC5C,CAAC,OAAOG,KAAK,EAAE;QACZ,MAAI,CAACI,MAAM,EAAE;QACb,MAAMJ,KAAK;;IACd;EACL;EAEAI,MAAM;IACFT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,kBAAkB,CAAC;IAC3C,IAAI,CAACF,IAAI,GAAG,IAAI;IAChB,IAAI,CAACd,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACpC;EAAC;qBA3FQX,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAmB,SAAVnB,UAAU;IAAAoB,YAFP;EAAM","names":["Gatekeeper","AppService","constructor","router","toastr","loginByAuth","email","password","token","localStorage","setItem","getProfile","navigate","success","error","message","registerByFacebook","user","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["F:\\Projects\\Project Square\\Template\\adminlte-3-angular-main\\src\\app\\services\\app.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\nimport {Gatekeeper} from 'gatekeeper-client-sdk';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppService {\n    public user: any = null;\n\n    constructor(private router: Router, private toastr: ToastrService) {}\n\n    async loginByAuth({email, password}) {\n        try {\n            const token = await Gatekeeper.loginByAuth(email, password);\n            localStorage.setItem('token', token);\n            await this.getProfile();\n            this.router.navigate(['/']);\n            this.toastr.success('Login success');\n        } catch (error) {\n            this.toastr.error(error.message);\n        }\n    }\n\n    // async registerByAuth({email, password}) {\n    //     try {\n    //         const token = await Gatekeeper.registerByAuth(email, password);\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Register success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async loginByGoogle() {\n    //     try {\n    //         const token = await Gatekeeper.loginByGoogle();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Login success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async registerByGoogle() {\n    //     try {\n    //         const token = await Gatekeeper.registerByGoogle();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Register success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async loginByFacebook() {\n    //     try {\n    //         const token = await Gatekeeper.loginByFacebook();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Login success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    async registerByFacebook() {\n        try {\n            const token = await Gatekeeper.registerByFacebook();\n            localStorage.setItem('token', token);\n            await this.getProfile();\n            this.router.navigate(['/']);\n            this.toastr.success('Register success');\n        } catch (error) {\n            this.toastr.error(error.message);\n        }\n    }\n\n    async getProfile() {\n        try {\n            this.user = await Gatekeeper.getProfile();\n        } catch (error) {\n            this.logout();\n            throw error;\n        }\n    }\n\n    logout() {\n        localStorage.removeItem('token');\n        localStorage.removeItem('gatekeeper_token');\n        this.user = null;\n        this.router.navigate(['/login']);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}