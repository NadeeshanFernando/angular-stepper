{"ast":null,"code":"import _asyncToGenerator from \"F:/Projects/Project Square/Template/adminlte-3-angular-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/common/http\";\nexport class AppService {\n  constructor(router, toastr, http) {\n    this.router = router;\n    this.toastr = toastr;\n    this.http = http;\n    this.user = null;\n    this.baseUrl = 'https://reqres.in/api';\n  }\n  login(authData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.http.post(`${_this.baseUrl}/login`, authData);\n    })();\n  }\n  profile() {\n    const token = localStorage.getItem('access_token');\n    var headers_object = new HttpHeaders();\n    headers_object = headers_object.append(\"Authorization\", \"Bearer \" + token);\n    const httpOptions = {\n      headers: headers_object\n    };\n    return this.http.get(`${this.baseUrl}/profile`, httpOptions);\n  }\n  loginByAuth({\n    au\n  }) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // const token = await Gatekeeper.loginByAuth(email, password);\n        const token = _this2.http.post(`${_this2.baseUrl}/login`, authData);\n        localStorage.setItem('token', token);\n        _this2.router.navigate(['/']);\n        _this2.toastr.success('Login success');\n      } catch (error) {\n        _this2.toastr.error(error.message);\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function AppService_Factory(t) {\n    return new (t || AppService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppService,\n    factory: AppService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAKA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;;AAK9D,OAAM,MAAOC,UAAU;EAInBC,YAAoBC,MAAc,EAAUC,MAAqB,EAAUC,IAAgB;IAAvE,WAAM,GAANF,MAAM;IAAkB,WAAM,GAANC,MAAM;IAAyB,SAAI,GAAJC,IAAI;IAHxE,SAAI,GAAQ,IAAI;IACf,YAAO,GAAG,uBAAuB;EAEqD;EAExFC,KAAK,CAACC,QAAa;IAAA;IAAA;MACrB,OAAO,KAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,KAAI,CAACC,OAAO,QAAQ,EAAEF,QAAQ,CAAC;IAAC;EAC7D;EAEAG,OAAO;IACH,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAIC,cAAc,GAAG,IAAId,WAAW,EAAE;IACtCc,cAAc,GAAGA,cAAc,CAC5BC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGJ,KAAK,CAAC;IAC7C,MAAMK,WAAW,GAAG;MAClBC,OAAO,EAAEH;KACV;IACD,OAAO,IAAI,CAACT,IAAI,CAACa,GAAG,CAAC,GAAG,IAAI,CAACT,OAAO,UAAU,EAAEO,WAAW,CAAC;EAC9D;EAEIG,WAAW,CAAC;IAACC;EAAE,CAAC;IAAA;IAAA;MAClB,IAAI;QACA;QACA,MAAMT,KAAK,GAAG,MAAI,CAACN,IAAI,CAACG,IAAI,CAAC,GAAG,MAAI,CAACC,OAAO,QAAQ,EAAEF,QAAQ,CAAC;QAC/DK,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEV,KAAK,CAAC;QACpC,MAAI,CAACR,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,MAAI,CAAClB,MAAM,CAACmB,OAAO,CAAC,eAAe,CAAC;OACvC,CAAC,OAAOC,KAAK,EAAE;QACZ,MAAI,CAACpB,MAAM,CAACoB,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;;IACnC;EACL;EAAC;qBA/BQxB,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAyB,SAAVzB,UAAU;IAAA0B,YAFP;EAAM","names":["HttpHeaders","AppService","constructor","router","toastr","http","login","authData","post","baseUrl","profile","token","localStorage","getItem","headers_object","append","httpOptions","headers","get","loginByAuth","au","setItem","navigate","success","error","message","factory","providedIn"],"sourceRoot":"","sources":["F:\\Projects\\Project Square\\Template\\adminlte-3-angular-main\\src\\app\\services\\app.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\nimport {Gatekeeper} from 'gatekeeper-client-sdk';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppService {\n    public user: any = null;\n    private baseUrl = 'https://reqres.in/api';\n\n    constructor(private router: Router, private toastr: ToastrService, private http: HttpClient) {}\n\n    async login(authData: any ){\n        return this.http.post(`${this.baseUrl}/login`, authData);\n    }\n\n    profile(): Observable<any>{\n        const token = localStorage.getItem('access_token')\n        var headers_object = new HttpHeaders();\n        headers_object = headers_object\n          .append(\"Authorization\", \"Bearer \" + token);\n        const httpOptions = {\n          headers: headers_object\n        };\n        return this.http.get(`${this.baseUrl}/profile`, httpOptions);\n      }\n\n    async loginByAuth({au}) {\n        try {\n            // const token = await Gatekeeper.loginByAuth(email, password);\n            const token = this.http.post(`${this.baseUrl}/login`, authData)\n            localStorage.setItem('token', token);\n            this.router.navigate(['/']);\n            this.toastr.success('Login success');\n        } catch (error) {\n            this.toastr.error(error.message);\n        }\n    }\n\n    // async registerByAuth({email, password}) {\n    //     try {\n    //         const token = await Gatekeeper.registerByAuth(email, password);\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Register success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async loginByGoogle() {\n    //     try {\n    //         const token = await Gatekeeper.loginByGoogle();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Login success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async registerByGoogle() {\n    //     try {\n    //         const token = await Gatekeeper.registerByGoogle();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Register success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async loginByFacebook() {\n    //     try {\n    //         const token = await Gatekeeper.loginByFacebook();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Login success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async registerByFacebook() {\n    //     try {\n    //         const token = await Gatekeeper.registerByFacebook();\n    //         localStorage.setItem('token', token);\n    //         await this.getProfile();\n    //         this.router.navigate(['/']);\n    //         this.toastr.success('Register success');\n    //     } catch (error) {\n    //         this.toastr.error(error.message);\n    //     }\n    // }\n\n    // async getProfile() {\n    //     try {\n    //         this.user = await Gatekeeper.getProfile();\n    //     } catch (error) {\n    //         this.logout();\n    //         throw error;\n    //     }\n    // }\n\n    // logout() {\n    //     localStorage.removeItem('token');\n    //     localStorage.removeItem('gatekeeper_token');\n    //     this.user = null;\n    //     this.router.navigate(['/login']);\n    // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}